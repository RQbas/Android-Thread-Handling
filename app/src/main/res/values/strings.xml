<resources>
    <string name="app_name">Thread Handling</string>
    <string name="title">Title</string>
    <string name="description">Description</string>
    <string name="title_activity_pipe">Pipe communication</string>
    <string name="pipe_title">Pipe communication</string>
    <string name="pipe_short_desc">Caesar\'s cipher implemented using pipe approach as a fundamental of communication</string>
    <string name="input_text">Input text</string>
    <string name="pipe_input_text">Text to encrypt</string>
    <string name="timer_example_display">0 ms</string>
    <string name="encrypted_text">Encrypted text</string>
    <string name="pipes">Pipes</string>
    <string name="activity">Activity</string>
    <string name="thread_communication">Thread communication</string>
    <string name="pipes_description">Pipes are based on consumer-producer pattern with blocking mechanism. Life cycle of pipe consists of three stages: setup,transfer and disconnection. Setup is strictly speaking the initialization of objects and pairing them. Communication is based on calling methods read and write. Data can be transferred as characters or bytes (PipedInputStream). The final step is calling close method on both objects.</string>
    <string name="pipes_example">This example shows usage of pipes in android to communicate between threads. Character entered in the input field  is sent through the pipe and then it is encrypted using caesar cipher. After encryption, UI thread is refreshed - encrypted character is shown and the duration of communication process is measured.  Since UI thread is involved with pipes there is possible blocking of calls and all processing is not so fast.</string>
    <string name="message_passing_title">Message passing</string>
    <string name="message_passing_short_desc">Progress bar activated by sending a message between threads </string>
    <string name="activate_button">ACTIVATE</string>
    <string name="progress">Progress</string>
    <string name="message_passing_example">This example is based on message handling mechanism. Pressing the button results in sending message with code “0” to the handler from the worker thread. When message is obtained there is conditional code execution to handle that message. Filling the progress bar is a long time operation in this case.</string>
    <string name="message_passing_description">The UI thread can offload long tasks by sending data messages to be processed on background threads. The message passing Android mechanism is a non blocking consumer-producer pattern, where neither the producer thread nor the consumer thread will block during the message handoff. The message handling mechanism is fundamental in the Android platform and the API located in the android.os package, with a set of classes: Handler, Looper, MessageQueue, Message. \n\nLooper - message dispatcher associated with the one and only consumer thread. \n\nHandler - consumer  thread  message  processor,  and  the interface  for a producer thread to insert messages into the queue. A Looper can have many associated handlers, but they all insert messages into the same queue. \n\nMessageQueue - unbounded linked list of messages to be processed on the consumer thread. Every Looper and Thread has at most one MessageQueue. \n\nMessage - message to be executed on the consumer thread.</string>
    <string name="bidirectional_passing_title">Bidirectional message passing</string>
    <string name="bidirectional_passing_short_desc">Progress bar is activated by sending a message between threads and its color is changed when message handling is finished</string>

</resources>
